'use client';

import { useEffect, useState, useRef } from 'react';

interface Activity {
  type: 'user' | 'post' | 'like' | 'repost';
  timestamp: string;
  data: {
    handle?: string;
    display_name?: string;
    followers_count?: number | null;
    text?: string;
  };
}

interface LiveActivity {
  counts: {
    users: number;
    posts: number;
    likes: number;
    reposts: number;
  };
  activities: Activity[];
  timestamp: string;
}

export function LiveFeed() {
  const [data, setData] = useState<LiveActivity | null>(null);
  const [filter, setFilter] = useState<string>('all');
  const [activities, setActivities] = useState<Activity[]>([]);

  useEffect(() => {
    const fetchActivity = async () => {
      try {
        const res = await fetch('/api/live-activity');
        const newData = await res.json();
        setData(newData);
        
        // Prepend new activities
        if (newData.activities && newData.activities.length > 0) {
          setActivities(prev => [...newData.activities, ...prev].slice(0, 50));
        }
      } catch (error) {
        console.error('Error fetching live activity:', error);
      }
    };

    fetchActivity();
    const interval = setInterval(fetchActivity, 1500);
    return () => clearInterval(interval);
  }, []);

  const filteredActivities = activities.filter(a => 
    filter === 'all' || a.type === filter
  );

  const getActivityIcon = (type: string) => {
    switch(type) {
      case 'user': return 'üë§';
      case 'post': return '‚úçÔ∏è';
      case 'like': return '‚ù§Ô∏è';
      case 'repost': return 'üîÑ';
      default: return 'üìå';
    }
  };

  const getActivityColor = (type: string) => {
    switch(type) {
      case 'user': return 'bg-blue-500/10 border-blue-500/30 hover:bg-blue-500/20';
      case 'post': return 'bg-green-500/10 border-green-500/30 hover:bg-green-500/20';
      case 'like': return 'bg-pink-500/10 border-pink-500/30 hover:bg-pink-500/20';
      case 'repost': return 'bg-purple-500/10 border-purple-500/30 hover:bg-purple-500/20';
      default: return 'bg-slate-500/10 border-slate-500/30 hover:bg-slate-500/20';
    }
  };

  const formatTimestamp = (ts: string) => {
    const date = new Date(ts);
    const now = new Date();
    const diff = Math.floor((now.getTime() - date.getTime()) / 1000);
    
    if (diff < 60) return `${diff}s ago`;
    if (diff < 3600) return `${Math.floor(diff / 60)}m ago`;
    return date.toLocaleTimeString();
  };

  const formatNumber = (num: number) => {
    if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`;
    if (num >= 1000) return `${(num / 1000).toFixed(1)}K`;
    return num.toString();
  };

  if (!data) {
    return (
      <div className="bg-white/50 dark:bg-zinc-800/50 backdrop-blur-sm rounded-xl p-8 shadow-lg border border-slate-200/50 dark:border-zinc-700/50">
        <div className="flex items-center justify-center">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
          <span className="ml-3 text-slate-600 dark:text-slate-400">Loading live activity...</span>
        </div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      {/* Stats Grid */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        <div className="bg-gradient-to-br from-blue-500/20 to-blue-600/10 dark:from-blue-500/30 dark:to-blue-600/20 backdrop-blur-sm rounded-xl p-6 shadow-lg border border-blue-300/30 dark:border-blue-700/30">
          <div className="text-3xl mb-2">üë•</div>
          <div className="text-3xl font-bold text-blue-700 dark:text-blue-300">
            {formatNumber(data.counts.users)}
          </div>
          <div className="text-sm text-blue-600/70 dark:text-blue-400/70 mt-1">New Users</div>
        </div>
        
        <div className="bg-gradient-to-br from-green-500/20 to-green-600/10 dark:from-green-500/30 dark:to-green-600/20 backdrop-blur-sm rounded-xl p-6 shadow-lg border border-green-300/30 dark:border-green-700/30">
          <div className="text-3xl mb-2">‚úçÔ∏è</div>
          <div className="text-3xl font-bold text-green-700 dark:text-green-300">
            {formatNumber(data.counts.posts)}
          </div>
          <div className="text-sm text-green-600/70 dark:text-green-400/70 mt-1">Posts</div>
        </div>
        
        <div className="bg-gradient-to-br from-pink-500/20 to-pink-600/10 dark:from-pink-500/30 dark:to-pink-600/20 backdrop-blur-sm rounded-xl p-6 shadow-lg border border-pink-300/30 dark:border-pink-700/30">
          <div className="text-3xl mb-2">‚ù§Ô∏è</div>
          <div className="text-3xl font-bold text-pink-700 dark:text-pink-300">
            {formatNumber(data.counts.likes)}
          </div>
          <div className="text-sm text-pink-600/70 dark:text-pink-400/70 mt-1">Likes</div>
        </div>
        
        <div className="bg-gradient-to-br from-purple-500/20 to-purple-600/10 dark:from-purple-500/30 dark:to-purple-600/20 backdrop-blur-sm rounded-xl p-6 shadow-lg border border-purple-300/30 dark:border-purple-700/30">
          <div className="text-3xl mb-2">üîÑ</div>
          <div className="text-3xl font-bold text-purple-700 dark:text-purple-300">
            {formatNumber(data.counts.reposts)}
          </div>
          <div className="text-sm text-purple-600/70 dark:text-purple-400/70 mt-1">Reposts</div>
        </div>
      </div>

      {/* Filter Buttons */}
      <div className="bg-white/50 dark:bg-zinc-800/50 backdrop-blur-sm rounded-xl p-4 shadow-lg border border-slate-200/50 dark:border-zinc-700/50">
        <div className="flex gap-2 flex-wrap">
          {['all', 'user', 'post', 'like', 'repost'].map(f => (
            <button
              key={f}
              onClick={() => setFilter(f)}
              className={`px-4 py-2 rounded-lg font-medium transition-all ${
                filter === f 
                  ? 'bg-blue-500 text-white shadow-lg scale-105' 
                  : 'bg-slate-200/50 dark:bg-zinc-700/50 text-slate-700 dark:text-slate-300 hover:bg-slate-300/50 dark:hover:bg-zinc-600/50'
              }`}
            >
              {f === 'all' ? 'üåê All' : `${getActivityIcon(f)} ${f.charAt(0).toUpperCase() + f.slice(1)}s`}
            </button>
          ))}
        </div>
      </div>

      {/* Activity Stream */}
      <div className="bg-white/50 dark:bg-zinc-800/50 backdrop-blur-sm rounded-xl p-6 shadow-lg border border-slate-200/50 dark:border-zinc-700/50">
        <h3 className="text-xl font-semibold text-slate-900 dark:text-slate-100 mb-4 flex items-center gap-2">
          <span className="animate-pulse">üî¥</span> Live Activity Stream
        </h3>
        <div className="space-y-3 max-h-[600px] overflow-y-auto">
          {filteredActivities.length === 0 ? (
            <div className="text-center py-8 text-slate-500 dark:text-slate-400">
              No activities yet...
            </div>
          ) : (
            filteredActivities.map((activity, idx) => (
              <div
                key={`${activity.timestamp}-${idx}`}
                className={`${getActivityColor(activity.type)} border rounded-lg p-4 transition-all duration-300 hover:scale-[1.02] cursor-pointer animate-fadeIn`}
              >
                <div className="flex items-start gap-3">
                  <div className="text-2xl">{getActivityIcon(activity.type)}</div>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center justify-between gap-2 mb-1">
                      <span className="font-semibold text-slate-900 dark:text-slate-100">
                        {activity.data.display_name || activity.data.handle || 'Unknown'}
                      </span>
                      <span className="text-xs text-slate-500 dark:text-slate-400 whitespace-nowrap">
                        {formatTimestamp(activity.timestamp)}
                      </span>
                    </div>
                    <div className="text-sm text-slate-600 dark:text-slate-400">
                      {activity.data.handle && (
                        <span className="text-blue-600 dark:text-blue-400">@{activity.data.handle}</span>
                      )}
                      {activity.type === 'user' && activity.data.followers_count !== null && (
                        <span className="ml-2 text-xs bg-slate-200 dark:bg-zinc-700 px-2 py-1 rounded">
                          {activity.data.followers_count} followers
                        </span>
                      )}
                    </div>
                    {activity.data.text && (
                      <p className="mt-2 text-sm text-slate-700 dark:text-slate-300 line-clamp-2">
                        {activity.data.text}
                      </p>
                    )}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>
      </div>
    </div>
  );
}