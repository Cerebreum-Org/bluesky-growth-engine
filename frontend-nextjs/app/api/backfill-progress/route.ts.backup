import { NextResponse } from 'next/server';
import fs from 'fs';
import path from 'path';

export const dynamic = 'force-dynamic';

export async function GET() {
  try {
    const logPath = path.join(process.cwd(), '..', 'bluesky-final-run.log');
    
    if (!fs.existsSync(logPath)) {
      return NextResponse.json({
        running: false,
        error: 'Log file not found',
      });
    }

    const logContent = fs.readFileSync(logPath, 'utf-8');
    const lines = logContent.split('\n').filter(line => line.trim());
    
    // Get the last 100 lines for recent progress
    const recentLines = lines.slice(-100);
    
    // Parse the most recent progress line
    const progressLines = recentLines.filter(line => line.includes('Indexed') && line.includes('user DIDs'));
    const lastProgressLine = progressLines[progressLines.length - 1];
    
    // Parse stats lines (likes, posts, etc.)
    const statsLines = recentLines.filter(line => line.includes('total'));
    
    let indexedUsers = 0;
    let totalLikes = 0;
    let totalPosts = 0;
    
    if (lastProgressLine) {
      const match = lastProgressLine.match(/Indexed ([\d,]+) user DIDs/);
      if (match) {
        indexedUsers = parseInt(match[1].replace(/,/g, ''));
      }
    }
    
    // Look for likes count
    const likesLine = statsLines.find(line => line.includes('Likes:'));
    if (likesLine) {
      const match = likesLine.match(/Likes: \+?\d+ \(([\d,]+) total\)/);
      if (match) {
        totalLikes = parseInt(match[1].replace(/,/g, ''));
      }
    }
    
    // Get recent log entries
    const recentEntries = recentLines.slice(-20).map(line => ({
      timestamp: new Date().toISOString(),
      message: line,
    }));
    
    return NextResponse.json({
      running: true,
      indexedUsers,
      totalLikes,
      totalPosts,
      recentEntries,
      lastUpdate: new Date().toISOString(),
    });
  } catch (error: any) {
    return NextResponse.json({
      running: false,
      error: error.message,
    }, { status: 500 });
  }
}
